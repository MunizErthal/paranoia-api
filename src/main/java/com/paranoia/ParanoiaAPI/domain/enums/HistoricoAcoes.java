package com.paranoia.ParanoiaAPI.domain.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum HistoricoAcoes {
    LOGIN_ERROR("%s", Boolean.TRUE),
    CADASTRO_ERROR("%s", Boolean.TRUE),
    LOGOUT_ERROR("%s", Boolean.TRUE),
    RESETAR_SENHA_ERROR("%s", Boolean.TRUE),
    TOKEN_EXPIRADO_ERROR("%s", Boolean.TRUE),
    CONFIRMACAO_EMAIL_ERROR("%s", Boolean.TRUE),
    CADASTRO_ENVIO_EMAIL_ERROR("EMAIL DE CADASTRO NÃO FOI ENVIADO PARA: %s", Boolean.TRUE),
    EMAIL_ERROR("ERRO AO MONTAR/ENVIAR EMAIL %s", Boolean.TRUE),
    MD5_HASH_ERROR("%s", Boolean.TRUE),
    BUSCAR_PERFIL_ERROR("PERFIL NÃO ENCONTRADO", Boolean.TRUE),
    SALVAR_FOTO_ERROR("ERRO AO SALVAR FOTO", Boolean.TRUE),
    CRIAR_EQUIPE_ERROR("ERRO AO CRIAR EQUIPE %s", Boolean.TRUE),
    EDITAR_EQUIPE_ERROR("ERRO AO CRIAR EQUIPE %s", Boolean.TRUE),
    OBTER_CONVITES_EQUIPE_ERROR("ERRO AO OBTER CONVITES DE EQUIPE", Boolean.TRUE),
    RESPONDER_CONVITE_ERROR("ERRO AO RESPONDER CONVITE PARA EQUIPE %s", Boolean.TRUE),
    ENVIAR_CONVITE_ERROR("ERRO AO ENVIAR CONVITE DA EQUIPE %s PARA EMAIL %s", Boolean.TRUE),
    ENVIAR_CONVITE_NOVO_USUARIO("CONVITE PARA EQUIPE %s ENVIADO COM SUCESSO PARA EMAIL %s DE NOVO USUARIO", Boolean.TRUE),
    SAIR_EQUIPE_ERROR("ERRO AO SAIR DA EQUIPE %s", Boolean.TRUE),
    REMOVER_MEMBRO_DA_EQUIPE_ERROR("ERRO AO REMOVER USUARIO %s DA EQUIPE %s", Boolean.TRUE),
    VERIFICAR_JOGADORES_ERROR("ERRO AO VERIFICAR JOGADORES DA EQUIPE %s", Boolean.TRUE),
    INICIAR_PARTIDA_ERROR("ERRO AO INICIAR PARTIDA PELA EQUIPE %s", Boolean.TRUE),
    OBTER_PARTIDA_ERROR("ERRO AO OBTER PARTIDA PELO USUÁRIO", Boolean.TRUE),
    FINALIZAR_PARTIDA_ERROR("ERRO AO FINALIZAR PARTIDA PELO USUÁRIO", Boolean.TRUE),
    FINALIZAR_PARTIDA_ADMINISTRADOR_ERROR("ERRO AO FINALIZAR PARTIDA COMO ADMINISTRADOR", Boolean.TRUE),
    SOLICITAR_DICA_ERROR("ERRO AO SOLICITAR DICA", Boolean.TRUE),
    CONCEDER_MEDALHAS_ERROR("ERRO AO CONCEDER MEDALHA", Boolean.TRUE),
    OBTER_PRODUTO_POR_HASH_ERROR("ERRO AO OBTER PRODUTO PELO HASH %s", Boolean.TRUE),
    CRIAR_VENDA_ERROR("ERRO AO CRIAR VENDA", Boolean.TRUE),
    BITNOIA_ERROR("ERRO AO OBTER BITNOIAS", Boolean.TRUE),
    ALTERAR_VENDA_ERROR("ERRO AO ALTERAR MERCADO PAGO DA VENDA", Boolean.TRUE),
    DELETAR_EQUIPE_ERROR("ERRO AO DELETAR EQUIPE", Boolean.TRUE),
    RANKING_PARTIDA_ERROR("BUSCAR RANKING DO USUÁRIO", Boolean.TRUE),
    RANKING_PARTIDA_USUARIO_ERROR("ERRO AO ENCONTRAR RANKING DO USUÁRIO", Boolean.TRUE),
    LER_ARQUIVO_DICAS_ERROR("ERRO AO LER ARQUIVO DE DICAS", Boolean.TRUE),
    PDF_ERROR("ERRO AO CRIAR PDF", Boolean.TRUE);

    final String mensagem;
    final Boolean erro;

    public String montarDescricao(Object ... args) {
        return String.format(mensagem, args);
    }
}
